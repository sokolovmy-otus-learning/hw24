#!/bin/bash

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Minikube
if ! command -v minikube &> /dev/null; then
    echo "‚ö†Ô∏è Minikube –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º..."
    curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
    sudo install minikube-linux-amd64 /usr/local/bin/minikube
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è kubectl
if ! command -v kubectl &> /dev/null; then
    echo "‚ö†Ô∏è kubectl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º..."
    curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    chmod +x kubectl
    sudo mv kubectl /usr/local/bin/
fi

# –ó–∞–ø—É—Å–∫ Minikube —Å —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏
echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Minikube —Å —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏..."
minikube start --driver=docker --memory=2048 --cpus=2

# –°–æ–∑–¥–∞–Ω–∏–µ namespace –¥–ª—è –ª–æ–≥–æ–≤
echo "üìÅ –°–æ–∑–¥–∞–µ–º namespace –¥–ª—è –ª–æ–≥–æ–≤..."
kubectl create namespace logs

# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Loki
echo "‚öôÔ∏è –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Loki..."
cat << EOF > loki-config.yaml
deploymentMode: SingleBinary
loki:
  auth_enabled: false
  commonConfig:
    replication_factor: 1
  server:
    http_listen_port: 3100
  storage:
    type: 'filesystem'
  schemaConfig:
    configs:
    - from: "2025-01-01"
      store: tsdb
      index:
        prefix: loki_index_
        period: 24h
      object_store: filesystem
      schema: v13
chunksCache:
  enabled: true
  allocatedMemory: 1024
singleBinary:
  replicas: 1
read:
  replicas: 0
backend:
  replicas: 0
write:
  replicas: 0
EOF

# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Promtail
echo "‚öôÔ∏è –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Promtail..."
cat << EOF > promtail-config.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: promtail-daemonset
  namespace: logs
spec:
  selector:
    matchLabels:
      name: promtail
  template:
    metadata:
      labels:
        name: promtail
    spec:
      serviceAccount: promtail-serviceaccount
      containers:
      - name: promtail-container
        image: grafana/promtail
        args:
        - -config.file=/etc/promtail/promtail.yaml
        env:
        - name: 'HOSTNAME'
          valueFrom:
            fieldRef:
              fieldPath: 'spec.nodeName'
        volumeMounts:
        - name: logs
          mountPath: /var/log
        - name: promtail-config
          mountPath: /etc/promtail
        - mountPath: /var/lib/docker/containers
          name: varlibdockercontainers
          readOnly: true
      volumes:
      - name: logs
        hostPath:
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: promtail-config
        configMap:
          name: promtail-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: promtail-config
  namespace: logs
data:
  promtail.yaml: |
    server:
      http_listen_port: 9080
      grpc_listen_port: 0
    clients:
    - url: http://loki-gateway.logs.svc.cluster.local/loki/api/v1/push
    positions:
      filename: /tmp/positions.yaml
    target_config:
      sync_period: 10s
    scrape_configs:
    - job_name: pod-logs
      kubernetes_sd_configs:
        - role: pod
      pipeline_stages:
        - docker: {}
      relabel_configs:
        - source_labels:
            - __meta_kubernetes_pod_node_name
          target_label: __host__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - action: replace
          replacement: $1
          separator: /
          source_labels:
            - __meta_kubernetes_namespace
            - __meta_kubernetes_pod_name
          target_label: job
        - action: replace
          source_labels:
            - __meta_kubernetes_namespace
          target_label: namespace
        - action: replace
          source_labels:
            - __meta_kubernetes_pod_name
          target_label: pod
        - action: replace
          source_labels:
            - __meta_kubernetes_pod_container_name
          target_label: container
        - replacement: /var/log/pods/*$1/*.log
          separator: /
          source_labels:
            - __meta_kubernetes_pod_uid
            - __meta_kubernetes_pod_container_name
          target_label: __path__
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: promtail-clusterrole
rules:
  - apiGroups: [""]
    resources:
    - nodes
    - services
    - pods
    verbs:
    - get
    - watch
    - list
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: promtail-serviceaccount
  namespace: logs
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: promtail-clusterrolebinding
subjects:
    - kind: ServiceAccount
      name: promtail-serviceaccount
      namespace: logs
roleRef:
    kind: ClusterRole
    name: promtail-clusterrole
    apiGroup: rbac.authorization.k8s.io
EOF

# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è Grafana —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
echo "‚öôÔ∏è –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è Grafana..."
cat << EOF > grafana-values.yaml
additionalDataSources:
  - name: Loki
    type: loki
    url: http://loki.logs.svc.cluster.local:3100
    access: proxy
  - name: Prometheus
    type: prometheus
    url: http://prometheus-server.logs.svc.cluster.local
    access: proxy
EOF

# –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
echo "‚öôÔ∏è –°–æ–∑–¥–∞–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö Grafana..."
cat << EOF > grafana-datasources.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: logs
  labels:
    grafana_datasource: "1"
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
    - name: Loki
      type: loki
      url: http://loki.logs.svc.cluster.local:3100
      access: proxy
      isDefault: false
    - name: Prometheus
      type: prometheus
      url: http://prometheus-server.logs.svc.cluster.local
      access: proxy
      isDefault: true
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: logs
spec:
  template:
    spec:
      volumes:
      - name: datasources
        configMap:
          name: grafana-datasources
      containers:
      - name: grafana
        volumeMounts:
        - name: datasources
          mountPath: "/etc/grafana/provisioning/datasources"
EOF

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Helm –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
if ! command -v helm &> /dev/null; then
    echo "‚ö†Ô∏è Helm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º..."
    curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
    chmod +x get_helm.sh
    ./get_helm.sh
    rm get_helm.sh
fi

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ Helm —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
echo "üì¶ –î–æ–±–∞–≤–ª—è–µ–º Helm —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏..."
helm repo add grafana https://grafana.github.io/helm-charts
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm repo update

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Loki
echo "‚¨áÔ∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Loki..."
helm install loki grafana/loki -f loki-config.yaml -n logs

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Promtail
echo "‚¨áÔ∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Promtail..."
kubectl apply -f promtail-config.yaml

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Prometheus
echo "‚¨áÔ∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Prometheus..."
helm install prometheus prometheus-community/prometheus -n logs

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Grafana —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
echo "‚¨áÔ∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Grafana —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö..."
helm install grafana grafana/grafana -n logs -f grafana-values.yaml \
  --set "datasources.datasources\.yaml.apiVersion=1" \
  --set "datasources.datasources\.yaml.datasources[0].name=Loki" \
  --set "datasources.datasources\.yaml.datasources[0].type=loki" \
  --set "datasources.datasources\.yaml.datasources[0].url=http://loki.logs.svc.cluster.local:3100" \
  --set "datasources.datasources\.yaml.datasources[0].access=proxy" \
  --set "datasources.datasources\.yaml.datasources[1].name=Prometheus" \
  --set "datasources.datasources\.yaml.datasources[1].type=prometheus" \
  --set "datasources.datasources\.yaml.datasources[1].url=http://prometheus-server.logs.svc.cluster.local" \
  --set "datasources.datasources\.yaml.datasources[1].access=proxy"

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥–æ–≤
echo "‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤..."
kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=loki -n logs --timeout=300s
kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=prometheus -n logs --timeout=300s
kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=grafana -n logs --timeout=300s

# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π Helm
echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ Helm-–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è Grafana..."
helm -n logs get values grafana

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Grafana –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Grafana –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö..."
kubectl -n logs rollout restart deployment grafana

# –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Grafana
echo "‚è≥ –û–∂–∏–¥–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Grafana..."
kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=grafana -n logs --timeout=300s

# –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ ConfigMap
echo "‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ..."
kubectl -n logs describe pod -l app.kubernetes.io/name=grafana | grep -q "datasources.yaml"
if [ $? -ne 0 ]; then
    echo "–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å —á–µ—Ä–µ–∑ Helm, –ø—Ä–∏–º–µ–Ω—è–µ–º ConfigMap..."
    kubectl apply -f grafana-datasources.yaml
    kubectl -n logs rollout restart deployment grafana
    kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=grafana -n logs --timeout=300s
fi

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ port-forwarding –¥–ª—è Grafana –∏ Prometheus
echo "üåê –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø–æ—Ä—Ç–∞–º..."
kubectl -n logs port-forward service/grafana 3000:80 --address=0.0.0.0 &
kubectl -n logs port-forward service/prometheus-server 9090:80 --address=0.0.0.0 &

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Grafana
echo "üîë –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Grafana..."
ADMIN_USER=$(kubectl -n logs get secret grafana -o jsonpath="{.data.admin-user}" | base64 -d)
ADMIN_PASS=$(kubectl -n logs get secret grafana -o jsonpath="{.data.admin-password}" | base64 -d)

# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–µ
echo "‚úÖ –ì–æ—Ç–æ–≤–æ! –î–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å–∞–º:"
echo "üìä Grafana: http://localhost:3000 (–≤–∫–ª—é—á–∞–µ—Ç Loki –∏ Prometheus –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö)"
echo "üë§ –õ–æ–≥–∏–Ω: $ADMIN_USER"
echo "üîí –ü–∞—Ä–æ–ª—å: $ADMIN_PASS"
echo "üìà Prometheus: http://localhost:9090"
echo "‚ÑπÔ∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –¥–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Minikube"
echo "üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: minikube stop"
echo "üîç –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö: –∑–∞–π–¥–∏—Ç–µ –≤ Grafana -> Configuration -> Data Sources"